# Dataset and Splits
storage_folder:  # path to DATA root folder (same as in data config file)
dataset_class:  # dotted path to dataset class
data_splits_file:  # path to data splits file


# Hardware
device:  # cpu | cuda
max_cpus:  # > 1 for parallelism
max_gpus: # > 0 for gpu usage (device must be cuda though)
gpus_per_task:  # percentage of gpus to allocate for each task


# Data Loading
dataset_getter:  # dotted path to dataset provider class
data_loader:
  class_name:  # dotted path to data loader class
  args:
    num_workers:
    pin_memory:
    # possibly other arguments (we set `worker_init_fn`, `sampler` and `shuffle`, so do not override)


# Reproducibility
seed: 42


# Experiment
result_folder:  # path of the folder where to store results
exp_name:  # name of the experiment
experiment:  # dotted path to experiment class
higher_results_are_better:  # model selection: should we select based on max (True) or min (False) main score?
evaluate_every:  # evaluate on train/val/test every `n` epochs and log results
risk_assessment_training_runs:  # how many final (model assessment) training runs to perform to mitigate bad initializations
model_selection_training_runs:  # how many (model selection) training runs to perform to mitigate bad initializations


# Grid Search
# if only 1 configuration is selected, any inner model selection will be skipped
grid:
  model:  # dotted path to model class
  checkpoint:  # whether to keep a checkpoint of the last epoch to resume training
  shuffle:  # whether to shuffle the data
  batch_size:  # batch size
  epochs:  # number of maximum training epochs

  # Model specific arguments #

  # TBD

  # ------------------------ #

  # Optimizer (with an example - 3 possible alternatives)
  optimizer:
    - class_name: mlwiz.training.callback.optimizer.Optimizer
      args:
        optimizer_class_name: torch.optim.Adam
        lr:
          - 0.01
          - 0.001
        weight_decay: 0.
    - class_name: mlwiz.training.callback.optimizer.Optimizer
      args:
        optimizer_class_name: torch.optim.Adagrad
        lr:
          - 0.1
        weight_decay: 0.

  # Scheduler (optional)
  scheduler: null

  # Loss metric (with an example of Additive Loss)
  loss:
    - class_name: mlwiz.training.callback.metric.AdditiveLoss
      args:
        loss_1: mlwiz.training.callback.metric.MulticlassClassification
        loss_2: mlwiz.training.callback.metric.MulticlassClassification

  # Score metric (with an example of Multi Score)
  scorer:
    - class_name: mlwiz.training.callback.metric.MultiScore
      args:
        main_scorer: mlwiz.training.callback.metric.MulticlassAccuracy
        my_second_metric: mlwiz.training.callback.metric.ToyMetric

  # Training engine
  engine: mlwiz.training.engine.TrainingEngine

  # Gradient clipper (optional)
  gradient_clipper: null

  # Early stopper (optional, with an example of "patience" early stopping on the validation score)
  early_stopper:
    - class_name:
        - mlwiz.training.callback.early_stopping.PatienceEarlyStopper
      args:
        patience:
          - 5
        # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
        monitor: validation_main_score
        mode: max  # is best the `max` or the `min` value we are monitoring?
        checkpoint: True  # store the best checkpoint

  # Plotter of metrics
  plotter: mlwiz.training.callback.plotter.Plotter
